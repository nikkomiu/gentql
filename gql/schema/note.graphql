type Note implements Node {
  id: Int!
  nodeId: ID!

  title: String!
  bodyMarkdown: String!
  bodyHtml: String!

  createdAt: Time!
  updatedAt: Time!
}

type NoteConnection {
  edges: [NoteEdge]
  pageInfo: PageInfo!
  totalCount: Int!
}

type NoteEdge {
  node: Note
  cursor: Cursor!
}

input NoteInput {
  title: String!
  body: String!
}

input NoteOrder {
  direction: OrderDirection!
  field: NoteOrderField
}

input NoteWhereInput {
  not: NoteWhereInput
  and: [NoteWhereInput!]
  or: [NoteWhereInput!]

  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleEqualFold: String
  titleContainsFold: String

  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time

  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
}

enum NoteOrderField {
  TITLE
  CREATED_AT
  UPDATED_AT
}

extend type Query {
  notes(
    after: Cursor
    first: Int
    before: Cursor
    last: Int
    orderBy: NoteOrder
    where: NoteWhereInput
  ): NoteConnection!
}

extend type Mutation {
  createNote(input: NoteInput!): Note!
  updateNote(id: Int!, input: NoteInput!): Note!
  deleteNote(id: Int!): Boolean!
}
